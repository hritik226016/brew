error: trait implementations cannot be const stable yet
  --> $DIR/staged-api.rs:25:1
   |
LL | / impl const MyTrait for Foo {
LL | |     fn func() {}
LL | | }
   | |_^
   |
   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information

error: function has missing const stability attribute
  --> $DIR/staged-api.rs:45:1
   |
LL | / pub const fn const_context_not_const_stable() {
LL | |     Unstable::func();
LL | |     Foo::func();
LL | |     // We get the error on `stable` since this is a trait function.
LL | |     Unstable2::func();
LL | |     // ^ fails, because the `unstable2` feature is not active
LL | | }
   | |_^

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:37:5
   |
LL |     Unstable::func();
   |     ^^^^^^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const fn const_context() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | const fn const_context() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:38:5
   |
LL |     Foo::func();
   |     ^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const fn const_context() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | const fn const_context() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:39:5
   |
LL |     Unstable2::func();
   |     ^^^^^^^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const fn const_context() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | const fn const_context() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:46:5
   |
LL |     Unstable::func();
   |     ^^^^^^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | pub const fn const_context_not_const_stable() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | pub const fn const_context_not_const_stable() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:47:5
   |
LL |     Foo::func();
   |     ^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | pub const fn const_context_not_const_stable() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | pub const fn const_context_not_const_stable() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:49:5
   |
LL |     Unstable2::func();
   |     ^^^^^^^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | pub const fn const_context_not_const_stable() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | pub const fn const_context_not_const_stable() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:56:5
   |
LL |     Unstable::func();
   |     ^^^^^^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const fn stable_const_context() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | const fn stable_const_context() {
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(const_trait_impl)]`
  --> $DIR/staged-api.rs:57:5
   |
LL |     Foo::func();
   |     ^^^^^^^^^^^
   |
help: if the function is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const fn stable_const_context() {
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(const_trait_impl)]
LL | const fn stable_const_context() {
   |

error: aborting due to 10 previous errors

