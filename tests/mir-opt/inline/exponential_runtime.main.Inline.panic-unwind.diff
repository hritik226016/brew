- // MIR for `main` before Inline
+ // MIR for `main` after Inline
  
  fn main() -> () {
      let mut _0: ();
      let _1: ();
+     scope 1 (inlined <() as G>::call) {
+         let _2: ();
+         let _3: ();
+         let _4: ();
+         scope 2 (inlined <() as F>::call) {
+             let _5: ();
+             let _6: ();
+             let _7: ();
+         }
+         scope 3 (inlined <() as F>::call) {
+             let _8: ();
+             let _9: ();
+             let _10: ();
+         }
+         scope 4 (inlined <() as F>::call) {
+             let _11: ();
+             let _12: ();
+             let _13: ();
+         }
+     }
  
      bb0: {
          StorageLive(_1);
-         _1 = <() as G>::call() -> [return: bb1, unwind continue];
+         StorageLive(_2);
+         StorageLive(_3);
+         StorageLive(_4);
+         StorageLive(_5);
+         StorageLive(_6);
+         StorageLive(_7);
+         _5 = <() as E>::call() -> [return: bb2, unwind continue];
      }
  
      bb1: {
+         StorageDead(_7);
+         StorageDead(_6);
+         StorageDead(_5);
+         StorageLive(_8);
+         StorageLive(_9);
+         StorageLive(_10);
+         _8 = <() as E>::call() -> [return: bb5, unwind continue];
+     }
+ 
+     bb2: {
+         _6 = <() as E>::call() -> [return: bb3, unwind continue];
+     }
+ 
+     bb3: {
+         _7 = <() as E>::call() -> [return: bb1, unwind continue];
+     }
+ 
+     bb4: {
+         StorageDead(_10);
+         StorageDead(_9);
+         StorageDead(_8);
+         StorageLive(_11);
+         StorageLive(_12);
+         StorageLive(_13);
+         _11 = <() as E>::call() -> [return: bb8, unwind continue];
+     }
+ 
+     bb5: {
+         _9 = <() as E>::call() -> [return: bb6, unwind continue];
+     }
+ 
+     bb6: {
+         _10 = <() as E>::call() -> [return: bb4, unwind continue];
+     }
+ 
+     bb7: {
+         StorageDead(_13);
+         StorageDead(_12);
+         StorageDead(_11);
+         StorageDead(_4);
+         StorageDead(_3);
+         StorageDead(_2);
          StorageDead(_1);
          _0 = const ();
          return;
+     }
+ 
+     bb8: {
+         _12 = <() as E>::call() -> [return: bb9, unwind continue];
+     }
+ 
+     bb9: {
+         _13 = <() as E>::call() -> [return: bb7, unwind continue];
      }
  }
  
