- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();
      let _1: A;
      let mut _2: std::boxed::Box<[bool]>;
      scope 1 {
          debug a => _1;
      }
      scope 2 (inlined <Box<[bool]> as Default>::default) {
          scope 3 {
          }
          scope 4 (inlined Unique::<[bool; 0]>::dangling) {
              scope 5 (inlined NonNull::<[bool; 0]>::dangling) {
                  scope 6 {
                      scope 8 (inlined NonNull::<[bool; 0]>::new_unchecked) {
                          let mut _3: bool;
                          let _4: ();
                          scope 9 (inlined core::ub_checks::check_language_ub) {
                              scope 10 (inlined core::ub_checks::check_language_ub::runtime) {
                              }
                          }
                      }
                  }
                  scope 7 (inlined dangling_mut::<[bool; 0]>) {
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_4);
          StorageLive(_3);
          _3 = UbChecks();
          switchInt(move _3) -> [0: bb3, otherwise: bb2];
      }
  
      bb1: {
          StorageDead(_1);
          return;
      }
  
      bb2: {
          _4 = NonNull::<T>::new_unchecked::precondition_check(const {0x80000000 as *mut ()}) -> [return: bb3, unwind unreachable];
      }
  
      bb3: {
          StorageDead(_3);
          _2 = const Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC0, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global);
          StorageDead(_4);
          _1 = const A {{ foo: Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC1, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global) }};
          StorageDead(_2);
          _0 = const ();
          drop(_1) -> [return: bb1, unwind unreachable];
      }
  }
  
  ALLOC1 (size: 8, align: 4) { .. }
  
  ALLOC0 (size: 8, align: 4) { .. }
  
