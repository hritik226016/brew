// MIR for `clone_rcs_of_many_types` after PreCodegen

fn clone_rcs_of_many_types(_1: &Rc<u8>, _2: &Rc<u32>, _3: &Rc<u128>, _4: &Rc<HighAlign>) -> (Rc<u8>, Rc<u32>, Rc<u128>, Rc<HighAlign>) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    debug d => _4;
    let mut _0: (std::rc::Rc<u8>, std::rc::Rc<u32>, std::rc::Rc<u128>, std::rc::Rc<HighAlign>);
    let mut _10: std::rc::Rc<u8>;
    let mut _16: std::rc::Rc<u32>;
    let mut _22: std::rc::Rc<u128>;
    let mut _28: std::rc::Rc<HighAlign>;
    scope 1 (inlined <Rc<u8> as Clone>::clone) {
        let _5: std::ptr::NonNull<u8>;
        let mut _8: std::ptr::NonNull<()>;
        let _9: ();
        scope 2 {
            scope 3 (inlined NonNull::<u8>::cast::<()>) {
                let mut _7: *const ();
                scope 4 (inlined NonNull::<u8>::as_ptr) {
                    let mut _6: *const u8;
                }
            }
            scope 5 (inlined Rc::<u8>::from_value_ptr_in) {
            }
            scope 6 (inlined <std::alloc::Global as Clone>::clone) {
            }
        }
    }
    scope 7 (inlined <Rc<u32> as Clone>::clone) {
        let _11: std::ptr::NonNull<u32>;
        let mut _14: std::ptr::NonNull<()>;
        let _15: ();
        scope 8 {
            scope 9 (inlined NonNull::<u32>::cast::<()>) {
                let mut _13: *const ();
                scope 10 (inlined NonNull::<u32>::as_ptr) {
                    let mut _12: *const u32;
                }
            }
            scope 11 (inlined Rc::<u32>::from_value_ptr_in) {
            }
            scope 12 (inlined <std::alloc::Global as Clone>::clone) {
            }
        }
    }
    scope 13 (inlined <Rc<u128> as Clone>::clone) {
        let _17: std::ptr::NonNull<u128>;
        let mut _20: std::ptr::NonNull<()>;
        let _21: ();
        scope 14 {
            scope 15 (inlined NonNull::<u128>::cast::<()>) {
                let mut _19: *const ();
                scope 16 (inlined NonNull::<u128>::as_ptr) {
                    let mut _18: *const u128;
                }
            }
            scope 17 (inlined Rc::<u128>::from_value_ptr_in) {
            }
            scope 18 (inlined <std::alloc::Global as Clone>::clone) {
            }
        }
    }
    scope 19 (inlined <Rc<HighAlign> as Clone>::clone) {
        let _23: std::ptr::NonNull<HighAlign>;
        let mut _26: std::ptr::NonNull<()>;
        let _27: ();
        scope 20 {
            scope 21 (inlined NonNull::<HighAlign>::cast::<()>) {
                let mut _25: *const ();
                scope 22 (inlined NonNull::<HighAlign>::as_ptr) {
                    let mut _24: *const HighAlign;
                }
            }
            scope 23 (inlined Rc::<HighAlign>::from_value_ptr_in) {
            }
            scope 24 (inlined <std::alloc::Global as Clone>::clone) {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_5);
        _5 = copy ((*_1).0: std::ptr::NonNull<u8>);
        StorageLive(_8);
        StorageLive(_6);
        StorageLive(_7);
        _6 = copy (_5.0: *const u8);
        _7 = copy _6 as *const () (PtrToPtr);
        _8 = NonNull::<()> { pointer: move _7 };
        StorageDead(_7);
        StorageDead(_6);
        _9 = <Rc<T, A> as Clone>::clone::clone_polymorphic(move _8) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_8);
        _10 = Rc::<u8> { value_ptr: copy _5, phantom: const PhantomData::<(rc::RcCounts, u8)>, alloc: const std::alloc::Global };
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_11);
        _11 = copy ((*_2).0: std::ptr::NonNull<u32>);
        StorageLive(_14);
        StorageLive(_12);
        StorageLive(_13);
        _12 = copy (_11.0: *const u32);
        _13 = copy _12 as *const () (PtrToPtr);
        _14 = NonNull::<()> { pointer: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        _15 = <Rc<T, A> as Clone>::clone::clone_polymorphic(move _14) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        StorageDead(_14);
        _16 = Rc::<u32> { value_ptr: copy _11, phantom: const PhantomData::<(rc::RcCounts, u32)>, alloc: const std::alloc::Global };
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_17);
        _17 = copy ((*_3).0: std::ptr::NonNull<u128>);
        StorageLive(_20);
        StorageLive(_18);
        StorageLive(_19);
        _18 = copy (_17.0: *const u128);
        _19 = copy _18 as *const () (PtrToPtr);
        _20 = NonNull::<()> { pointer: move _19 };
        StorageDead(_19);
        StorageDead(_18);
        _21 = <Rc<T, A> as Clone>::clone::clone_polymorphic(move _20) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        StorageDead(_20);
        _22 = Rc::<u128> { value_ptr: copy _17, phantom: const PhantomData::<(rc::RcCounts, u128)>, alloc: const std::alloc::Global };
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_23);
        _23 = copy ((*_4).0: std::ptr::NonNull<HighAlign>);
        StorageLive(_26);
        StorageLive(_24);
        StorageLive(_25);
        _24 = copy (_23.0: *const HighAlign);
        _25 = copy _24 as *const () (PtrToPtr);
        _26 = NonNull::<()> { pointer: move _25 };
        StorageDead(_25);
        StorageDead(_24);
        _27 = <Rc<T, A> as Clone>::clone::clone_polymorphic(move _26) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        StorageDead(_26);
        _28 = Rc::<HighAlign> { value_ptr: copy _23, phantom: const PhantomData::<(rc::RcCounts, HighAlign)>, alloc: const std::alloc::Global };
        StorageDead(_23);
        _0 = (move _10, move _16, move _22, move _28);
        StorageDead(_28);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_10);
        return;
    }
}
