- // MIR for `identity` before JumpThreading
+ // MIR for `identity` after JumpThreading
  
  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {
      debug x => _1;
      let mut _0: std::result::Result<i32, i32>;
      let mut _2: i32;
      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>;
      let mut _4: std::result::Result<i32, i32>;
      let mut _5: isize;
      let _6: std::result::Result<std::convert::Infallible, i32>;
      let mut _7: std::result::Result<std::convert::Infallible, i32>;
      let _8: i32;
      scope 1 {
          debug residual => _6;
          scope 2 {
              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) {
                  let _13: i32;
                  let mut _14: i32;
                  scope 9 {
                      scope 10 (inlined <i32 as From<i32>>::from) {
                      }
                  }
              }
          }
      }
      scope 3 {
          debug val => _8;
          scope 4 {
          }
      }
      scope 5 (inlined <Result<i32, i32> as Try>::branch) {
          let mut _9: isize;
          let _10: i32;
          let _11: i32;
          let mut _12: std::result::Result<std::convert::Infallible, i32>;
          scope 6 {
          }
          scope 7 {
          }
      }
  
      bb0: {
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
          _4 = copy _1;
          StorageLive(_9);
          StorageLive(_10);
          StorageLive(_11);
          _9 = discriminant(_4);
-         switchInt(move _9) -> [0: bb6, 1: bb5, otherwise: bb1];
+         switchInt(move _9) -> [0: bb3, 1: bb2, otherwise: bb1];
      }
  
      bb1: {
          unreachable;
      }
  
      bb2: {
-         StorageLive(_8);
-         _8 = copy ((_3 as Continue).0: i32);
-         _2 = copy _8;
-         StorageDead(_8);
-         _0 = Result::<i32, i32>::Ok(move _2);
-         StorageDead(_2);
-         StorageDead(_3);
-         return;
-     }
- 
-     bb3: {
+         _11 = move ((_4 as Err).0: i32);
+         StorageLive(_12);
+         _12 = Result::<Infallible, i32>::Err(copy _11);
+         _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _12);
+         StorageDead(_12);
+         StorageDead(_11);
+         StorageDead(_10);
+         StorageDead(_9);
+         StorageDead(_4);
+         _5 = discriminant(_3);
          StorageLive(_6);
          _6 = copy ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>);
          StorageLive(_7);
          _7 = copy _6;
          StorageLive(_13);
          _13 = move ((_7 as Err).0: i32);
          StorageLive(_14);
          _14 = move _13;
          _0 = Result::<i32, i32>::Err(move _14);
          StorageDead(_14);
          StorageDead(_13);
          StorageDead(_7);
          StorageDead(_6);
          StorageDead(_2);
          StorageDead(_3);
          return;
      }
  
-     bb4: {
+     bb3: {
+         _10 = move ((_4 as Ok).0: i32);
+         _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(copy _10);
          StorageDead(_11);
          StorageDead(_10);
          StorageDead(_9);
          StorageDead(_4);
          _5 = discriminant(_3);
-         switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1];
-     }
- 
-     bb5: {
-         _11 = move ((_4 as Err).0: i32);
-         StorageLive(_12);
-         _12 = Result::<Infallible, i32>::Err(copy _11);
-         _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _12);
-         StorageDead(_12);
-         goto -> bb4;
-     }
- 
-     bb6: {
-         _10 = move ((_4 as Ok).0: i32);
-         _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(copy _10);
-         goto -> bb4;
+         StorageLive(_8);
+         _8 = copy ((_3 as Continue).0: i32);
+         _2 = copy _8;
+         StorageDead(_8);
+         _0 = Result::<i32, i32>::Ok(move _2);
+         StorageDead(_2);
+         StorageDead(_3);
+         return;
      }
  }
  
